"""empty message

Revision ID: c415a8b150b2
Revises: 
Create Date: 2020-10-25 08:02:35.675506

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import os
import json

# revision identifiers, used by Alembic.
revision = 'c415a8b150b2'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    Power_lines = op.create_table('Power_lines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('start_segment_name', sa.String(length=256), nullable=True),
    sa.Column('end_segment_name', sa.String(length=256), nullable=True),
    sa.Column('year_of_commissioning', sa.Integer(), nullable=True),
    sa.Column('voltage_class', sa.String(length=256), nullable=True),
    sa.Column('technical_condition', sa.String(length=256), nullable=True),
    sa.Column('network_name', sa.String(length=256), nullable=True),
    sa.Column('control_number', sa.String(length=256), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    Substations = op.create_table('Substations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('network_name', sa.String(length=256), nullable=True),
    sa.Column('substation_name', sa.String(length=256), nullable=True),
    sa.Column('voltage_class', sa.String(length=256), nullable=True),
    sa.Column('year_of_commissioning', sa.Integer(), nullable=True),
    sa.Column('substation_number', sa.String(length=256), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    Lines_Segments = op.create_table('Lines_Segments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('start_point', sa.String(length=256), nullable=True),
    sa.Column('end_point', sa.String(length=256), nullable=True),
    sa.Column('segment_length', sa.Float(), nullable=True),
    sa.Column('lines_amount', sa.Integer(), nullable=True),
    sa.Column('wires_mark', sa.String(length=256), nullable=True),
    sa.Column('year_of_commissioning', sa.Integer(), nullable=True),
    sa.Column('wires_type', sa.String(length=256), nullable=True),
    sa.Column('primary_line', sa.Boolean(), nullable=False),
    sa.Column('power_line_id', sa.Integer(), nullable=True),
    sa.Column('control_number', sa.String(length=256), nullable=True),
    sa.ForeignKeyConstraint(['power_line_id'], ['Power_lines.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    Transformers = op.create_table('Transformers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('substation_id', sa.Integer(), nullable=True),
    sa.Column('nominal_power', sa.Float(), nullable=True),
    sa.Column('year_manufacture', sa.Integer(), nullable=True),
    sa.Column('year_activate', sa.Integer(), nullable=True),
    sa.Column('technical_condition', sa.String(length=256), nullable=True),
    sa.Column('transformer_type', sa.String(length=256), nullable=True),
    sa.Column('transformer_number', sa.String(length=256), nullable=True),
    sa.ForeignKeyConstraint(['substation_id'], ['Substations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
    json_file_path = os.path.abspath(os.path.join(
        os.path.dirname(__file__), '..', '..', 'data_file.json'))
    with open(json_file_path, 'r') as f:
        data = json.loads(f.read())
    lep_to_insert = []
    lines_segments_to_insert = []
    transformers_to_insert = []
    substation_to_insert = []
    for k, v in data.items():
        lep_to_insert.append({"id": k,"start_segment_name": v["start_segment_name"], "end_segment_name" : v["end_segment_name"], "year_of_commissioning" : v["year_of_commissioning"], "voltage_class" : v["voltage_class"], "technical_condition" : v["technical_condition"], "control_number" : v["control_number"], "lines_segments" : v["lines_segments"]})
        for key, value in v["lines_segments"]:
            lines_segments_to_insert.append({"id": key,"start_point" : value["start_point"], "end_point" : value["end_point"], "segment_length" : value["segment_length"], "lines_amount" : value["lines_amount"], "year_of_commissioning" : value["year_of_commissioning"], "wires_mark" : value["wires_mark"], "wires_type" : value["wires_type"], "primary_line" : value["primary_line"], "control_number" : value["control_number"], "power_line_id" : k})
    op.bulk_insert(Power_lines, lep_to_insert)
    op.bulk_insert(Lines_Segments, lines_segments_to_insert)
    op.bulk_insert(Transformers, transformers_to_insert)
    op.bulk_insert(Substations, substation_to_insert)
    


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('Transformers')
    op.drop_table('Lines_Segments')
    op.drop_table('Substations')
    op.drop_table('Power_lines')
    # ### end Alembic commands ###
